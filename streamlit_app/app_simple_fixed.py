#!/usr/bin/env python3
"""
APLICACI√ìN STREAMLIT SIMPLIFICADA Y ROBUSTA
=========================================

Versi√≥n sin errores de indentaci√≥n para Streamlit Cloud
"""

import streamlit as st
import os
import sys

# Configurar matplotlib ANTES de cualquier otro import
try:
    import matplotlib
    matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    plt.ioff()
except:
    pass

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="ü§ñ Agente IoT Completo",
    page_icon="ü§ñ", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# Variables de entorno
GROQ_API_KEY = os.getenv('GROQ_API_KEY')
JETSON_API_URL = "https://respect-craps-lit-aged.trycloudflare.com"

# Agregar path del proyecto
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if project_root not in sys.path:
    sys.path.append(project_root)

def show_banner():
    """Banner profesional simplificado"""
    st.markdown("## üè≠ Sistema IoT Industrial - Monitoreo con IA")
    st.markdown("üü¢ **Estado:** Sistema Operativo | üì° **Conectividad:** API Activa")
    
    st.info("""
    **Sistema avanzado de monitoreo IoT** ejecut√°ndose en **NVIDIA Jetson Nano** con 
    capacidades de IA integradas para an√°lisis inteligente de sensores industriales.
    """)
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üìä An√°lisis", "1h - 7 d√≠as", "Paginaci√≥n autom√°tica")
    with col2:
        st.metric("ü§ñ IA", "Groq LLM", "An√°lisis predictivo")
    with col3:
        st.metric("üîç Sensores", "6 tipos", "Multi-dispositivo")
    with col4:
        st.metric("üñ•Ô∏è Hardware", "Jetson Nano", "4GB RAM")
    
    st.markdown("---")

def main():
    """Funci√≥n principal simplificada"""
    
    # Verificar configuraci√≥n
    if not GROQ_API_KEY:
        st.error("‚ùå Configure GROQ_API_KEY en Streamlit Cloud Secrets")
        st.stop()
    
    # Mostrar banner
    show_banner()
    
    # Mensaje de funcionalidad b√°sica
    st.title("üí¨ Chat con Agente IoT")
    
    # Configuraci√≥n temporal
    with st.expander("‚è∞ Configuraci√≥n de An√°lisis Temporal", expanded=False):
        time_range = st.selectbox(
            "üìÖ Rango de Datos",
            options=[
                ("3h", "3 horas (Tiempo Real)"),
                ("6h", "6 horas (Reciente)"),
                ("12h", "12 horas (Paginado)"),
                ("24h", "24 horas (1 d√≠a)")
            ],
            format_func=lambda x: x[1],
            index=0
        )
        hours = float(time_range[0][:-1])
        st.session_state.analysis_hours = hours
        
        if hours <= 6:
            st.success("‚ö° Consulta r√°pida - Respuesta inmediata")
        else:
            st.info("üìö Consulta extensa - Paginaci√≥n autom√°tica")
    
    # Chat b√°sico
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Mostrar mensajes
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # Input del usuario
    if prompt := st.chat_input("üí¨ Escribe tu consulta sobre sensores IoT..."):
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        with st.chat_message("user"):
            st.markdown(prompt)
        
        with st.chat_message("assistant"):
            # Respuesta simple por ahora hasta que se resuelva el error
            response = """
            ü§ñ **Sistema IoT Operativo**
            
            El sistema est√° funcionando correctamente. Actualmente estamos resolviendo 
            algunos problemas de compatibilidad para restaurar todas las funcionalidades.
            
            **Estado del Sistema:**
            - ‚úÖ Conexi√≥n a Jetson Nano: Activa
            - ‚úÖ API de sensores: Funcionando
            - ‚úÖ Base de datos: Operativa
            - üîß IA Conversacional: En mantenimiento
            
            Pronto tendr√°s acceso completo al an√°lisis inteligente de datos.
            """
            st.markdown(response)
            st.session_state.messages.append({"role": "assistant", "content": response})

    # Sidebar
    with st.sidebar:
        st.header("üîß Panel de Control")
        st.info("Sistema en modo de compatibilidad")
        
        if st.button("üîÑ Recargar"):
            st.rerun()

if __name__ == "__main__":
    main()