"""
üéØ STREAMLIT APP CON BANNER PROFESIONAL Y PAGINACI√ìN
Demostraci√≥n de sistema IoT con capacidades empresariales
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import streamlit as st
from modules.utils.professional_banner import display_complete_banner
from modules.agents.direct_api_agent import DirectAPIAgent
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from datetime import datetime, timezone
import json

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="üè≠ Sistema IoT Industrial", 
    page_icon="üè≠",
    layout="wide",
    initial_sidebar_state="expanded"
)

def main():
    """Aplicaci√≥n principal con banner profesional"""
    
    # Mostrar banner profesional completo
    display_complete_banner()
    
    # Sidebar para configuraci√≥n
    with st.sidebar:
        st.header("‚öôÔ∏è Configuraci√≥n de An√°lisis")
        
        # Selector de rango temporal con paginaci√≥n autom√°tica
        time_range = st.selectbox(
            "üìÖ Rango Temporal",
            options=[
                ("3h", "3 horas (Tiempo Real)"),
                ("6h", "6 horas (Reciente)"),
                ("12h", "12 horas (Paginado)"),
                ("24h", "24 horas (1 d√≠a)"),
                ("48h", "48 horas (2 d√≠as)"),
                ("168h", "168 horas (1 semana)")
            ],
            format_func=lambda x: x[1],
            index=0
        )
        
        hours = float(time_range[0][:-1])  # Extraer n√∫mero de horas
        
        # Informaci√≥n sobre la consulta
        if hours <= 6:
            st.success("‚ö° Consulta r√°pida - Respuesta inmediata")
        else:
            st.info("üìö Consulta extensa - Usando paginaci√≥n avanzada")
        
        st.markdown("---")
        
        # Configuraci√≥n de visualizaci√≥n
        show_individual_sensors = st.checkbox("üîç Mostrar sensores individuales", value=True)
        show_statistics = st.checkbox("üìä Mostrar estad√≠sticas avanzadas", value=True)
        
        # Informaci√≥n t√©cnica
        with st.expander("üîß Info T√©cnica"):
            st.markdown(f"""
            **Configuraci√≥n Actual:**
            - Rango: {hours} horas
            - M√©todo: {'Paginado' if hours > 6 else 'Est√°ndar'}
            - M√°x. Registros: {min(2000, int(hours * 50)) if hours > 6 else 200}
            """)
    
    # Bot√≥n principal para obtener datos
    if st.button("üì° Obtener Datos del Sistema IoT", type="primary", use_container_width=True):
        
        with st.spinner(f"üîÑ Obteniendo datos de {hours}h usando {'paginaci√≥n' if hours > 6 else 'm√©todo est√°ndar'}..."):
            
            try:
                # Conectar al agente
                base_url = "https://plain-state-refers-nutritional.trycloudflare.com"
                agent = DirectAPIAgent(base_url=base_url)
                
                # Obtener datos con paginaci√≥n autom√°tica
                start_time = datetime.now()
                result = agent.get_all_recent_data(hours=hours)
                end_time = datetime.now()
                
                duration = (end_time - start_time).total_seconds()
                
                if result.get('status') == 'success':
                    
                    # M√©tricas principales
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric(
                            "üìà Registros Obtenidos",
                            result.get('total_records', 0),
                            delta=f"M√©todo: {result.get('method', 'unknown')}"
                        )
                    
                    with col2:
                        st.metric(
                            "üñ•Ô∏è Dispositivos Activos",
                            result.get('active_devices', 0),
                            delta="En l√≠nea"
                        )
                    
                    with col3:
                        st.metric(
                            "‚è±Ô∏è Tiempo de Respuesta",
                            f"{duration:.2f}s",
                            delta="Optimizado"
                        )
                    
                    with col4:
                        records_per_hour = result.get('total_records', 0) / hours if hours > 0 else 0
                        st.metric(
                            "üìä Densidad de Datos",
                            f"{records_per_hour:.1f} rec/h",
                            delta="Calidad Alta"
                        )
                    
                    # Procesar datos para visualizaci√≥n
                    sensor_data = result.get('sensor_data', [])
                    
                    if sensor_data:
                        
                        # Convertir a DataFrame
                        df = pd.DataFrame(sensor_data)
                        df['timestamp'] = pd.to_datetime(df['timestamp'])
                        
                        # Gr√°fico principal - Temperatura
                        st.subheader("üå°Ô∏è An√°lisis de Temperatura")
                        
                        temp_data = df[df['sensor_type'].str.contains('temperature', na=False, case=False)]
                        
                        if not temp_data.empty:
                            fig_temp = px.line(
                                temp_data, 
                                x='timestamp', 
                                y='value', 
                                color='device_id',
                                facet_col='sensor_type',
                                title=f"Evoluci√≥n de Temperatura ({hours}h)",
                                labels={'value': 'Temperatura (¬∞C)', 'timestamp': 'Tiempo'}
                            )
                            fig_temp.update_layout(height=400)
                            st.plotly_chart(fig_temp, use_container_width=True)
                        
                        # Gr√°fico de luminosidad
                        st.subheader("üí° An√°lisis de Luminosidad")
                        
                        ldr_data = df[df['sensor_type'] == 'ldr']
                        
                        if not ldr_data.empty:
                            fig_ldr = px.scatter(
                                ldr_data,
                                x='timestamp',
                                y='value',
                                color='device_id',
                                title=f"Niveles de Luminosidad ({hours}h)",
                                labels={'value': 'Luminosidad', 'timestamp': 'Tiempo'}
                            )
                            fig_ldr.update_layout(height=400)
                            st.plotly_chart(fig_ldr, use_container_width=True)
                        
                        # Estad√≠sticas por dispositivo
                        if show_statistics:
                            st.subheader("üìä Estad√≠sticas por Dispositivo")
                            
                            stats_data = []
                            for device in result.get('data', {}).get('devices', []):
                                device_id = device.get('device_id')
                                records = device.get('records', [])
                                
                                if records:
                                    device_df = pd.DataFrame(records)
                                    device_df['value'] = pd.to_numeric(device_df['value'], errors='coerce')
                                    
                                    stats_data.append({
                                        'Dispositivo': device_id,
                                        'Registros': len(records),
                                        'Temp Promedio': device_df[device_df['sensor_type'].str.contains('temperature', na=False)]['value'].mean(),
                                        'Temp M√°xima': device_df[device_df['sensor_type'].str.contains('temperature', na=False)]['value'].max(),
                                        'Temp M√≠nima': device_df[device_df['sensor_type'].str.contains('temperature', na=False)]['value'].min(),
                                    })
                            
                            if stats_data:
                                stats_df = pd.DataFrame(stats_data)
                                st.dataframe(stats_df, use_container_width=True)
                        
                        # Mostrar datos individuales si se solicita
                        if show_individual_sensors:
                            with st.expander("üîç Datos Detallados por Sensor"):
                                sensor_types = df['sensor_type'].unique()
                                
                                for sensor_type in sensor_types:
                                    st.write(f"**{sensor_type.upper()}**")
                                    sensor_subset = df[df['sensor_type'] == sensor_type]
                                    st.dataframe(sensor_subset[['timestamp', 'device_id', 'value']].head(10))
                        
                        # Informaci√≥n de la consulta
                        with st.expander("‚ÑπÔ∏è Informaci√≥n de la Consulta"):
                            query_info = {
                                "Rango Temporal": f"{hours} horas",
                                "M√©todo Utilizado": result.get('method', 'unknown'),
                                "Tiempo de Respuesta": f"{duration:.2f} segundos",
                                "Registros Totales": result.get('total_records', 0),
                                "Dispositivos Activos": result.get('active_devices', 0),
                                "Timestamp": datetime.now(timezone.utc).isoformat()
                            }
                            
                            st.json(query_info)
                    
                    else:
                        st.warning("‚ö†Ô∏è No se encontraron datos de sensores en el rango especificado")
                
                else:
                    st.error(f"‚ùå Error obteniendo datos: {result.get('message', 'Error desconocido')}")
                    
            except Exception as e:
                st.error(f"üí• Error de conexi√≥n: {str(e)}")
                st.info("üîß Verifique que el sistema IoT est√© en l√≠nea y la URL sea correcta")

if __name__ == "__main__":
    main()