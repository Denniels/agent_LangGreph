"""
Sistema IoT Ultra-Robusto - Aplicaci√≥n Streamlit Cloud Optimizada
===============================================================

Aplicaci√≥n principal que integra el sistema ultra-robusto para garantizar
acceso confiable a datos y generar reportes ejecutivos completos.
"""

import streamlit as st
import os
import sys
from datetime import datetime, timedelta
import json
import traceback
import logging
from typing import Dict, Any, List, Optional

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# A√±adir el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="Sistema IoT Ultra-Robusto",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Imports diferidos para optimizar carga
@st.cache_resource
def load_ultra_robust_system():
    """Cargar sistema ultra-robusto con cache."""
    try:
        from modules.tools.ultra_robust_connector import UltraRobustJetsonConnector
        from modules.agents.ultra_robust_agent import UltraRobustIoTAgent
        from modules.utils.executive_report_generator import ExecutiveReportGenerator
        from modules.utils.visualization_engine import VisualizationEngine
        
        # Inicializar componentes con URL actual
        base_url = "https://wonder-sufficiently-generator-click.trycloudflare.com"
        connector = UltraRobustJetsonConnector(base_url)
        visualization_engine = VisualizationEngine()
        agent = UltraRobustIoTAgent(connector, visualization_engine)
        report_generator = ExecutiveReportGenerator(connector, visualization_engine)
        
        return {
            'connector': connector,
            'agent': agent,
            'visualization_engine': visualization_engine,
            'report_generator': report_generator,
            'status': 'success'
        }
    except Exception as e:
        logger.error(f"Error cargando sistema ultra-robusto: {e}")
        return {
            'status': 'error',
            'error': str(e),
            'traceback': traceback.format_exc()
        }

@st.cache_data(ttl=300)  # Cache por 5 minutos
def get_system_status():
    """Obtener estado del sistema con cache."""
    system = load_ultra_robust_system()
    if system['status'] == 'error':
        return {
            'status': 'ERROR',
            'message': f"Error inicializando sistema: {system['error']}",
            'devices': 0,
            'last_update': 'Error'
        }
    
    try:
        # Verificar conectividad
        from modules.tools.ultra_robust_connector import UltraRobustJetsonConnector
        base_url = "https://wonder-sufficiently-generator-click.trycloudflare.com"
        connector = UltraRobustJetsonConnector(base_url)
        test_data = connector.get_devices_robust()
        device_count = len(test_data) if test_data else 0
        
        return {
            'status': 'OPERATIVO' if device_count > 0 else 'SIN DATOS',
            'message': f"Sistema operativo con {device_count} dispositivos detectados",
            'devices': device_count,
            'last_update': datetime.now().strftime("%H:%M:%S")
        }
    except Exception as e:
        return {
            'status': 'ERROR',
            'message': f"Error verificando estado: {str(e)}",
            'devices': 0,
            'last_update': 'Error'
        }

def main():
    """Funci√≥n principal de la aplicaci√≥n."""
    
    # Header principal
    st.markdown("""
    <div style="background: linear-gradient(90deg, #667eea 0%, #764ba2 100%); 
                padding: 2rem; border-radius: 10px; margin-bottom: 2rem;">
        <h1 style="color: white; text-align: center; margin: 0;">
            üöÄ Sistema IoT Ultra-Robusto
        </h1>
        <p style="color: white; text-align: center; margin: 0.5rem 0 0 0;">
            An√°lisis T√©cnico Avanzado con Acceso Garantizado a Datos
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Verificar estado del sistema
    with st.spinner("üîÑ Inicializando sistema ultra-robusto..."):
        system_status = get_system_status()
        system_components = load_ultra_robust_system()
    
    # Mostrar estado del sistema
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        status_color = {
            'OPERATIVO': 'üü¢',
            'SIN DATOS': 'üü°', 
            'ERROR': 'üî¥'
        }.get(system_status['status'], '‚ö™')
        
        st.metric(
            "Estado del Sistema", 
            f"{status_color} {system_status['status']}",
            delta=f"Actualizado: {system_status['last_update']}"
        )
    
    with col2:
        st.metric(
            "Dispositivos Detectados",
            system_status['devices'],
            delta="Activos" if system_status['devices'] > 0 else "Sin conexi√≥n"
        )
    
    with col3:
        st.metric(
            "Modo de Operaci√≥n",
            "Ultra-Robusto",
            delta="M√∫ltiples Fallbacks"
        )
    
    with col4:
        st.metric(
            "√öltima Verificaci√≥n",
            system_status['last_update'],
            delta="Auto-actualizaci√≥n"
        )
    
    # Mensaje de estado
    if system_status['status'] == 'ERROR':
        st.error(f"‚ö†Ô∏è {system_status['message']}")
        if system_components['status'] == 'error':
            with st.expander("üîç Detalles del Error"):
                st.code(system_components['traceback'])
        st.stop()
    elif system_status['status'] == 'SIN DATOS':
        st.warning(f"‚ö†Ô∏è {system_status['message']}")
        st.info("El sistema est√° operativo pero no se detectan datos. Verifique la conectividad de los dispositivos IoT.")
    else:
        st.success(f"‚úÖ {system_status['message']}")
    
    # Sidebar para configuraci√≥n
    st.sidebar.header("‚öôÔ∏è Configuraci√≥n del Sistema")
    
    # Opciones de an√°lisis
    analysis_hours = st.sidebar.selectbox(
        "üïê Per√≠odo de An√°lisis",
        options=[1, 2, 4, 8, 12, 24, 48, 72],
        index=5,  # 24 horas por defecto
        help="Seleccionar per√≠odo de tiempo para an√°lisis de datos"
    )
    
    analysis_type = st.sidebar.selectbox(
        "üìä Tipo de An√°lisis",
        options=["An√°lisis R√°pido", "An√°lisis T√©cnico", "Reporte Ejecutivo Completo"],
        index=1,
        help="Seleccionar nivel de profundidad del an√°lisis"
    )
    
    enable_visualizations = st.sidebar.checkbox(
        "üìà Generar Visualizaciones",
        value=True,
        help="Incluir gr√°ficos y visualizaciones en el an√°lisis"
    )
    
    # Configuraciones avanzadas
    with st.sidebar.expander("üîß Configuraci√≥n Avanzada"):
        max_records = st.number_input(
            "M√°ximo de registros por dispositivo",
            min_value=100,
            max_value=10000,
            value=1000,
            step=100
        )
        
        fallback_strategy = st.selectbox(
            "Estrategia de Fallback",
            options=["Agresiva", "Conservadora", "Balanceada"],
            index=2
        )
        
        cache_timeout = st.slider(
            "Timeout de Cache (minutos)",
            min_value=1,
            max_value=30,
            value=5
        )
    
    # Secci√≥n principal
    st.header("üéØ An√°lisis del Sistema IoT")
    
    # Tabs principales
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä An√°lisis en Tiempo Real", 
        "üìã Reporte Ejecutivo",
        "üîç Diagn√≥stico del Sistema",
        "üìà Visualizaciones"
    ])
    
    with tab1:
        st.subheader("An√°lisis T√©cnico en Tiempo Real")
        
        if st.button("üöÄ Ejecutar An√°lisis Ultra-Robusto", type="primary"):
            
            if system_components['status'] == 'error':
                st.error("‚ùå No se puede ejecutar an√°lisis: Sistema no inicializado correctamente")
                return
            
            with st.spinner(f"üîÑ Ejecutando an√°lisis ultra-robusto ({analysis_hours}h)..."):
                try:
                    # Obtener agente ultra-robusto
                    agent = system_components['agent']
                    
                    # Construir query t√©cnica
                    query = f"""
                    Proporciona un an√°lisis t√©cnico comprehensivo del sistema IoT considerando:
                    - Per√≠odo de an√°lisis: {analysis_hours} horas
                    - Tipo de an√°lisis: {analysis_type}
                    - Estado actual del sistema: {system_status['status']}
                    
                    Incluye an√°lisis detallado de:
                    1. Estado operativo de dispositivos y sensores
                    2. M√©tricas de rendimiento y disponibilidad  
                    3. An√°lisis estad√≠stico de datos por dispositivo
                    4. Identificaci√≥n de patrones y anomal√≠as
                    5. Evaluaci√≥n de calidad de datos
                    6. Recomendaciones t√©cnicas espec√≠ficas
                    
                    Proporciona respuestas t√©cnicas precisas y contundentes basadas en datos reales.
                    """
                    
                    # Ejecutar an√°lisis
                    start_time = datetime.now()
                    response = agent.process_query(query, hours=analysis_hours)
                    execution_time = (datetime.now() - start_time).total_seconds()
                    
                    # Mostrar resultados
                    st.success(f"‚úÖ An√°lisis completado en {execution_time:.2f} segundos")
                    
                    # M√©tricas de ejecuci√≥n
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Tiempo de Ejecuci√≥n", f"{execution_time:.2f}s")
                    with col2:
                        st.metric("Registros Analizados", response.get('data_summary', {}).get('total_records', 'N/A'))
                    with col3:
                        st.metric("Dispositivos Procesados", response.get('data_summary', {}).get('devices_analyzed', 'N/A'))
                    
                    # Respuesta principal
                    st.markdown("### üéØ An√°lisis T√©cnico Comprehensivo")
                    st.markdown(response.get('response', 'Sin respuesta generada'))
                    
                    # Datos t√©cnicos adicionales
                    if 'data_summary' in response:
                        with st.expander("üìä Resumen de Datos Analizados"):
                            st.json(response['data_summary'])
                    
                    if 'analysis_metadata' in response:
                        with st.expander("üîß Metadatos del An√°lisis"):
                            st.json(response['analysis_metadata'])
                    
                    # Visualizaciones
                    if enable_visualizations and 'visualizations' in response:
                        st.markdown("### üìà Visualizaciones Generadas")
                        
                        for viz in response['visualizations']:
                            if os.path.exists(viz.get('path', '')):
                                st.image(viz['path'], caption=viz.get('name', 'Visualizaci√≥n'))
                    
                except Exception as e:
                    st.error(f"‚ùå Error ejecutando an√°lisis: {str(e)}")
                    with st.expander("üîç Detalles del Error"):
                        st.code(traceback.format_exc())
    
    with tab2:
        st.subheader("üìã Reporte Ejecutivo Completo")
        
        if st.button("üìä Generar Reporte Ejecutivo", type="primary"):
            
            if system_components['status'] == 'error':
                st.error("‚ùå No se puede generar reporte: Sistema no inicializado correctamente")
                return
            
            with st.spinner(f"üìã Generando reporte ejecutivo comprehensivo..."):
                try:
                    # Obtener generador de reportes
                    report_generator = system_components['report_generator']
                    
                    # Generar reporte
                    start_time = datetime.now()
                    report = report_generator.generate_comprehensive_report(
                        hours=analysis_hours,
                        report_type="executive"
                    )
                    generation_time = (datetime.now() - start_time).total_seconds()
                    
                    st.success(f"‚úÖ Reporte generado en {generation_time:.2f} segundos")
                    
                    # Mostrar reporte
                    st.markdown("### üéØ Resumen Ejecutivo")
                    st.markdown(report['executive_summary']['overview'])
                    
                    # M√©tricas clave
                    st.markdown("### üìä M√©tricas Clave del Sistema")
                    metrics = report['executive_summary']['key_metrics']
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Dispositivos Activos", metrics.get('dispositivos_activos', 0))
                        st.metric("Sensores Totales", metrics.get('sensores_totales', 0))
                    with col2:
                        st.metric("Registros Analizados", metrics.get('registros_analizados', 0))
                        st.metric("Per√≠odo (horas)", metrics.get('per√≠odo_an√°lisis_horas', 0))
                    with col3:
                        st.metric("√öltima Actividad", metrics.get('√∫ltima_actividad', 'N/A'))
                        st.metric("Frecuencia Promedio", f"{metrics.get('frecuencia_promedio_registros', 0):.2f} reg/h")
                    
                    # Hallazgos cr√≠ticos
                    st.markdown("### üîç Hallazgos Cr√≠ticos")
                    for finding in report['executive_summary']['critical_findings']:
                        if '‚ùå' in finding:
                            st.error(finding)
                        elif '‚ö†Ô∏è' in finding:
                            st.warning(finding)
                        elif '‚úÖ' in finding:
                            st.success(finding)
                        else:
                            st.info(finding)
                    
                    # An√°lisis de rendimiento
                    st.markdown("### ‚ö° An√°lisis de Rendimiento")
                    perf_metrics = report['performance_metrics']['system_performance']
                    
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("Eficiencia del Sistema", f"{perf_metrics.get('system_efficiency_percentage', 0):.1f}%")
                    with col2:
                        st.metric("Throughput", f"{perf_metrics.get('data_throughput_records_per_hour', 0):.1f} rec/h")
                    with col3:
                        st.metric("Completitud", f"{perf_metrics.get('data_completeness_score', 0):.1f}%")
                    with col4:
                        st.metric("Uptime Estimado", f"{perf_metrics.get('uptime_estimation', 0):.1f}%")
                    
                    # Recomendaciones
                    st.markdown("### üöÄ Recomendaciones")
                    
                    if report['recommendations']['immediate_actions']:
                        st.markdown("**Acciones Inmediatas:**")
                        for action in report['recommendations']['immediate_actions']:
                            st.markdown(f"- {action}")
                    
                    if report['recommendations']['short_term_improvements']:
                        st.markdown("**Mejoras a Corto Plazo:**")
                        for improvement in report['recommendations']['short_term_improvements']:
                            st.markdown(f"- {improvement}")
                    
                    # Exportar reporte
                    st.markdown("### üíæ Exportar Reporte")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("üìÑ Exportar a HTML"):
                            html_content = report_generator.export_to_html(report)
                            st.download_button(
                                label="üì• Descargar HTML",
                                data=html_content,
                                file_name=f"reporte_ejecutivo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
                                mime="text/html"
                            )
                    
                    with col2:
                        if st.button("üìä Descargar JSON"):
                            json_content = json.dumps(report, indent=2, ensure_ascii=False)
                            st.download_button(
                                label="üì• Descargar JSON",
                                data=json_content,
                                file_name=f"reporte_datos_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                                mime="application/json"
                            )
                    
                    # Mostrar detalles t√©cnicos
                    with st.expander("üîß Detalles T√©cnicos Completos"):
                        st.json(report)
                    
                except Exception as e:
                    st.error(f"‚ùå Error generando reporte: {str(e)}")
                    with st.expander("üîç Detalles del Error"):
                        st.code(traceback.format_exc())
    
    with tab3:
        st.subheader("üîç Diagn√≥stico del Sistema Ultra-Robusto")
        
        if st.button("ü©∫ Ejecutar Diagn√≥stico Completo", type="secondary"):
            
            if system_components['status'] == 'error':
                st.error("‚ùå No se puede ejecutar diagn√≥stico: Sistema no inicializado correctamente")
                return
            
            with st.spinner("üîÑ Ejecutando diagn√≥stico comprehensivo..."):
                try:
                    connector = system_components['connector']
                    
                    # Test de conectividad
                    st.markdown("### üåê Test de Conectividad")
                    
                    # Test 1: Dispositivos
                    devices_result = connector.get_devices_robust()
                    if devices_result:
                        st.success(f"‚úÖ Dispositivos: {len(devices_result)} detectados")
                        st.json(devices_result[:2])  # Mostrar primeros 2
                    else:
                        st.error("‚ùå No se pudieron obtener dispositivos")
                    
                    # Test 2: Datos de sensores
                    st.markdown("### üìä Test de Datos de Sensores")
                    sensor_data = connector.get_sensor_data_robust(hours=1)
                    if sensor_data:
                        st.success(f"‚úÖ Datos de sensores: {len(sensor_data)} registros en √∫ltima hora")
                        
                        # An√°lisis por dispositivo
                        device_counts = {}
                        for record in sensor_data:
                            device_id = record.get('device_id', 'unknown')
                            device_counts[device_id] = device_counts.get(device_id, 0) + 1
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.metric("Dispositivos con Datos", len(device_counts))
                            st.metric("Total Registros", len(sensor_data))
                        
                        with col2:
                            st.markdown("**Registros por Dispositivo:**")
                            for device, count in device_counts.items():
                                st.markdown(f"- {device}: {count} registros")
                    
                    else:
                        st.error("‚ùå No se pudieron obtener datos de sensores")
                    
                    # Test 3: An√°lisis comprehensivo
                    st.markdown("### üîß Test de An√°lisis Comprehensivo")
                    comprehensive_data = connector.get_all_data_comprehensive(hours=2, max_records_per_device=100)
                    if comprehensive_data:
                        st.success(f"‚úÖ An√°lisis comprehensivo: {len(comprehensive_data)} registros")
                        
                        # Estad√≠sticas
                        devices = set(r.get('device_id') for r in comprehensive_data if r.get('device_id'))
                        sensors = set(f"{r.get('device_id')}_{r.get('sensor_type')}" for r in comprehensive_data 
                                    if r.get('device_id') and r.get('sensor_type'))
                        
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Dispositivos √önicos", len(devices))
                        with col2:
                            st.metric("Sensores √önicos", len(sensors))
                        with col3:
                            st.metric("Calidad de Datos", f"{(len(comprehensive_data)/max(1,len(comprehensive_data)))*100:.1f}%")
                    
                    else:
                        st.warning("‚ö†Ô∏è An√°lisis comprehensivo devolvi√≥ datos vac√≠os")
                    
                    # Resumen del diagn√≥stico
                    st.markdown("### üìã Resumen del Diagn√≥stico")
                    
                    total_tests = 3
                    passed_tests = sum([
                        1 if devices_result else 0,
                        1 if sensor_data else 0,
                        1 if comprehensive_data else 0
                    ])
                    
                    success_rate = (passed_tests / total_tests) * 100
                    
                    if success_rate == 100:
                        st.success(f"‚úÖ Sistema completamente operativo ({passed_tests}/{total_tests} tests pasados)")
                    elif success_rate >= 66:
                        st.warning(f"‚ö†Ô∏è Sistema parcialmente operativo ({passed_tests}/{total_tests} tests pasados)")
                    else:
                        st.error(f"‚ùå Sistema con problemas cr√≠ticos ({passed_tests}/{total_tests} tests pasados)")
                    
                    st.progress(success_rate / 100)
                    
                except Exception as e:
                    st.error(f"‚ùå Error ejecutando diagn√≥stico: {str(e)}")
                    with st.expander("üîç Detalles del Error"):
                        st.code(traceback.format_exc())
    
    with tab4:
        st.subheader("üìà Motor de Visualizaciones")
        
        if enable_visualizations and st.button("üé® Generar Visualizaciones", type="secondary"):
            
            if system_components['status'] == 'error':
                st.error("‚ùå No se puede generar visualizaciones: Sistema no inicializado correctamente")
                return
            
            with st.spinner("üé® Generando visualizaciones comprehensivas..."):
                try:
                    # Obtener datos
                    connector = system_components['connector']
                    visualization_engine = system_components['visualization_engine']
                    
                    data = connector.get_all_data_comprehensive(hours=analysis_hours, max_records_per_device=max_records)
                    
                    if not data:
                        st.warning("‚ö†Ô∏è No hay datos suficientes para generar visualizaciones")
                        return
                    
                    # Generar gr√°ficos
                    chart_paths = visualization_engine.generate_charts(
                        data, 
                        f"An√°lisis Comprehensivo - {analysis_hours}h"
                    )
                    
                    if chart_paths:
                        st.success(f"‚úÖ {len(chart_paths)} visualizaciones generadas")
                        
                        # Mostrar gr√°ficos
                        cols = st.columns(2)
                        for i, chart_path in enumerate(chart_paths):
                            if os.path.exists(chart_path):
                                with cols[i % 2]:
                                    chart_name = os.path.basename(chart_path)
                                    st.image(chart_path, caption=chart_name, use_column_width=True)
                    else:
                        st.warning("‚ö†Ô∏è No se pudieron generar visualizaciones")
                
                except Exception as e:
                    st.error(f"‚ùå Error generando visualizaciones: {str(e)}")
                    with st.expander("üîç Detalles del Error"):
                        st.code(traceback.format_exc())
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 1rem;">
        <p>üöÄ <strong>Sistema IoT Ultra-Robusto</strong> | 
        Versi√≥n 2.0 | 
        M√∫ltiples Estrategias de Fallback | 
        An√°lisis T√©cnico Avanzado</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()