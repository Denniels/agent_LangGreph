#!/usr/bin/env python3
"""
Script para explorar la estructura de la base de datos IoT en Jetson Nano
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

async def explore_database():
    """Explora la estructura de la base de datos IoT"""
    
    # Cargar variables de entorno
    load_dotenv()
    
    # Configuraci√≥n de la base de datos en Jetson Nano
    db_config = {
        'host': os.getenv('DB_HOST', '192.168.0.102'),
        'port': int(os.getenv('DB_PORT', 5432)),
        'database': os.getenv('DB_NAME', 'iot_system'),
        'user': os.getenv('DB_USER', 'iot_user'),
        'password': os.getenv('DB_PASSWORD', 'iot_password123')
    }
    
    print(f"üîó Intentando conectar a:")
    print(f"   Host: {db_config['host']}")
    print(f"   Puerto: {db_config['port']}")
    print(f"   Base de datos: {db_config['database']}")
    print(f"   Usuario: {db_config['user']}")
    print("-" * 50)
    
    try:
        print("‚è≥ Conectando a la base de datos...")
        conn = await asyncpg.connect(**db_config)
        print("‚úÖ ¬°Conexi√≥n exitosa!")
        
        # Verificar versi√≥n de PostgreSQL
        version = await conn.fetchval("SELECT version()")
        print(f"üìã Versi√≥n PostgreSQL: {version}")
        
        # Listar todas las tablas
        print("\nüìä Tablas en la base de datos:")
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name;
        """)
        
        if not tables:
            print("   ‚ùå No se encontraron tablas")
            await conn.close()
            return
        
        for table in tables:
            print(f"   üìÑ {table[0]}")
        
        print("\n" + "="*60)
        
        # Explorar estructura de cada tabla
        for table in tables:
            table_name = table[0]
            print(f"\nüîç Estructura de la tabla '{table_name}':")
            
            # Obtener columnas
            columns = await conn.fetch("""
                SELECT 
                    column_name, 
                    data_type, 
                    is_nullable, 
                    column_default,
                    character_maximum_length
                FROM information_schema.columns 
                WHERE table_name = $1
                ORDER BY ordinal_position;
            """, table_name)
            
            for col in columns:
                nullable = "NULL" if col[2] == 'YES' else "NOT NULL"
                default = f", DEFAULT: {col[3]}" if col[3] else ""
                length = f"({col[4]})" if col[4] else ""
                print(f"   üìå {col[0]}: {col[1]}{length} {nullable}{default}")
            
            # Contar registros
            try:
                count = await conn.fetchval(f'SELECT COUNT(*) FROM "{table_name}"')
                print(f"   üìä Registros: {count}")
            except Exception as e:
                print(f"   ‚ùå Error contando registros: {e}")
            
            # Mostrar algunos datos de ejemplo (primeros 3 registros)
            if table_name in ['devices', 'sensor_data', 'alerts']:
                try:
                    sample_data = await conn.fetch(f'SELECT * FROM "{table_name}" LIMIT 3')
                    if sample_data:
                        print(f"   üîç Datos de ejemplo:")
                        for i, row in enumerate(sample_data, 1):
                            print(f"      Registro {i}: {dict(row)}")
                    else:
                        print(f"   üìù No hay datos en la tabla")
                except Exception as e:
                    print(f"   ‚ùå Error obteniendo datos de ejemplo: {e}")
            
            print("-" * 40)
        
        await conn.close()
        print("\n‚úÖ Exploraci√≥n completada exitosamente")
        
    except ConnectionError as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        print("üîß Posibles soluciones:")
        print("   1. Verificar que PostgreSQL est√© ejecut√°ndose en la Jetson Nano")
        print("   2. Verificar la conectividad de red (ping 192.168.0.102)")
        print("   3. Verificar que el puerto 5432 est√© abierto")
        print("   4. Verificar credenciales de base de datos")
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        print(f"   Tipo: {type(e).__name__}")

async def test_network_connectivity():
    """Prueba la conectividad de red b√°sica"""
    import subprocess
    import platform
    
    host = "192.168.0.102"
    
    print(f"üåê Probando conectividad a {host}...")
    
    # Comando ping seg√∫n el sistema operativo
    if platform.system().lower() == "windows":
        cmd = ["ping", "-n", "3", host]
    else:
        cmd = ["ping", "-c", "3", host]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ Conectividad de red OK")
            return True
        else:
            print("‚ùå No hay conectividad de red")
            print(f"   Error: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Error probando conectividad: {e}")
        return False

async def main():
    """Funci√≥n principal"""
    print("üöÄ Explorador de Base de Datos IoT")
    print("=" * 50)
    
    # Probar conectividad primero
    if await test_network_connectivity():
        await explore_database()
    else:
        print("\n‚ö†Ô∏è  Sin conectividad de red. No se puede acceder a la base de datos.")

if __name__ == "__main__":
    asyncio.run(main())
