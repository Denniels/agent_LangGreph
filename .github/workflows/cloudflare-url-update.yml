name: 🔄 Smart Cloudflare URL Detection

on:
  schedule:
    # Ejecutar cada 10 minutos (más conservador para evitar límites)
    - cron: '*/10 * * * *'
  
  # Permitir ejecución manual
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Forzar detección y actualización de URLs'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Modo de prueba (no actualizar archivos)'
        required: false
        default: false
        type: boolean

  # Ejecutar cuando se detecten cambios en archivos de configuración
  push:
    paths:
      - 'cloudflare_urls.json'
      - 'modules/utils/ultra_robust_cloudflare_manager.py'
      - '.github/workflows/cloudflare-url-update.yml'

jobs:
  update-cloudflare-urls:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: 🔍 Detect Cloudflare URL changes
      id: detect_changes
      run: |
        echo "🚀 Starting smart Cloudflare URL detection..."
        
        # Instalar dependencias adicionales si es necesario
        pip install beautifulsoup4
        
        # Crear script de detección en línea
        cat > detect_cloudflare_url.py << 'EOF'
        import requests
        import json
        import re
        import time
        from datetime import datetime
        
        def detect_current_url():
            """Detectar URL actual usando múltiples estrategias."""
            
            # URLs candidatas conocidas para probar
            candidate_urls = [
                "https://returned-convenience-tower-switched.trycloudflare.com",
                "https://reflect-wed-governmental-fisher.trycloudflare.com", 
                "https://replica-subscriber-permission-restricted.trycloudflare.com",
            ]
            
            print("🔍 Probando URLs candidatas...")
            
            working_urls = []
            for url in candidate_urls:
                try:
                    response = requests.get(f"{url}/health", timeout=10)
                    if response.status_code == 200:
                        working_urls.append(url)
                        print(f"  ✅ Funciona: {url}")
                    else:
                        print(f"  🟡 HTTP {response.status_code}: {url}")
                except Exception as e:
                    print(f"  ❌ Error: {url} - {str(e)[:50]}")
            
            if working_urls:
                return working_urls[0]  # Retornar la primera que funcione
            
            print("⚠️ Ninguna URL candidata funciona, intentando descubrimiento...")
            
            # TODO: Aquí se podrían agregar más métodos de descubrimiento
            # Por ahora retornamos None
            return None
        
        def load_current_config():
            """Cargar configuración actual."""
            try:
                with open('cloudflare_urls.json', 'r') as f:
                    return json.load(f)
            except:
                return {"current_url": None}
        
        def save_config(config):
            """Guardar configuración actualizada."""
            config['last_updated'] = datetime.now().isoformat()
            with open('cloudflare_urls.json', 'w') as f:
                json.dump(config, f, indent=2)
        
        # Detección principal
        detected_url = detect_current_url()
        current_config = load_current_config()
        current_url = current_config.get('current_url')
        
        print(f"\n📊 RESULTADOS:")
        print(f"  URL actual en config: {current_url}")
        print(f"  URL detectada: {detected_url}")
        
        # Determinar si hay cambios
        if detected_url and detected_url != current_url:
            print("🚨 CAMBIO DETECTADO!")
            
            # Actualizar configuración
            current_config['current_url'] = detected_url
            current_config['metadata'] = {
                'detection_method': 'github_actions_discovery',
                'confident': True,
                'tested': True,
                'previous_url': current_url
            }
            
            # Actualizar backup_urls
            if 'backup_urls' not in current_config:
                current_config['backup_urls'] = []
            
            if detected_url not in current_config['backup_urls']:
                current_config['backup_urls'].insert(0, detected_url)
            
            # Mantener solo las últimas 5 URLs
            current_config['backup_urls'] = current_config['backup_urls'][:5]
            
            save_config(current_config)
            
            print("✅ Configuración actualizada")
            return True
        else:
            print("ℹ️ No hay cambios")
            return False
        
        if __name__ == "__main__":
            has_changes = detect_current_url()
            exit(0 if has_changes else 1)
        EOF
        
        # Ejecutar detección
        python detect_cloudflare_url.py
        DETECTION_RESULT=$?
        
        # Verificar si hay cambios en git
        if git diff --quiet cloudflare_urls.json; then
          echo "changes_detected=false" >> $GITHUB_OUTPUT
          echo "✅ No changes in configuration"
        else
          echo "changes_detected=true" >> $GITHUB_OUTPUT
          echo "🚨 Configuration updated!"
          
          # Mostrar cambios
          echo "Changes in cloudflare_urls.json:"
          git diff cloudflare_urls.json
        fi

    - name: 📊 Generate change report
      if: steps.detect_changes.outputs.changes_detected == 'true'
      run: |
        echo "## 🔄 Cloudflare URL Update Report" > update_report.md
        echo "" >> update_report.md
        echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> update_report.md
        echo "" >> update_report.md
        
        # Obtener la URL actual
        python -c "
        try:
            from modules.utils.jetson_url_config import get_current_jetson_url
            print(f'**New URL:** {get_current_jetson_url()}')
        except Exception as e:
            print(f'**Error getting URL:** {e}')
        " >> update_report.md
        
        echo "" >> update_report.md
        echo "**Files modified:**" >> update_report.md
        git diff --name-only | sed 's/^/- /' >> update_report.md
        
        echo "" >> update_report.md
        echo "**Triggered by:** GitHub Actions (Automated)" >> update_report.md
        echo "" >> update_report.md
        echo "---" >> update_report.md
        echo "*This update was performed automatically by the Cloudflare URL monitoring system.*" >> update_report.md

    - name: 🔧 Configure Git
      if: steps.detect_changes.outputs.changes_detected == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Cloudflare URL Auto-Update"

    - name: 💾 Commit and push changes
      if: steps.detect_changes.outputs.changes_detected == 'true'
      run: |
        # Agregar todos los archivos modificados
        git add .
        
        # Obtener información para el commit
        CURRENT_URL=$(python -c "
        try:
            from modules.utils.jetson_url_config import get_current_jetson_url
            print(get_current_jetson_url())
        except:
            print('unknown-url')
        ")
        
        COMMIT_MSG="🔄 Auto-update Cloudflare URL to ${CURRENT_URL}

        - Detected URL change via automated monitoring
        - Updated all references automatically
        - Triggered at $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - Auto-generated by GitHub Actions"
        
        # Hacer commit
        git commit -m "$COMMIT_MSG"
        
        echo "✅ Changes committed successfully"

    - name: 🚀 Push changes
      if: steps.detect_changes.outputs.changes_detected == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

    - name: 📢 Post-update notification
      if: steps.detect_changes.outputs.changes_detected == 'true'
      run: |
        echo "🎉 Cloudflare URL update completed successfully!"
        echo "📊 Summary:"
        echo "  - New URL detected and updated"
        echo "  - All files synchronized"
        echo "  - Changes pushed to repository"
        echo "  - Streamlit Cloud will auto-deploy new version"
        
        # Validar que el sistema funcione
        python -c "
        try:
            from modules.utils.jetson_url_config import validate_jetson_url, get_current_jetson_url
            url = get_current_jetson_url()
            valid = validate_jetson_url()
            print(f'✅ Final validation: URL {url} is {'valid' if valid else 'invalid'}')
        except Exception as e:
            print(f'❌ Validation error: {e}')
        "

    - name: ℹ️ No changes notification
      if: steps.detect_changes.outputs.changes_detected == 'false'
      run: |
        echo "ℹ️ No Cloudflare URL changes detected"
        echo "✅ System is up to date"
        
        # Mostrar estado actual
        python -c "
        try:
            from modules.utils.jetson_url_config import get_current_jetson_url, validate_jetson_url
            url = get_current_jetson_url()
            valid = validate_jetson_url()
            print(f'📊 Current URL: {url}')
            print(f'🔍 Status: {'healthy' if valid else 'unhealthy'}')
        except Exception as e:
            print(f'❌ Error: {e}')
        "

  # Job adicional para notificaciones (opcional)
  notify-on-failure:
    runs-on: ubuntu-latest
    needs: update-cloudflare-urls
    if: failure()
    
    steps:
    - name: 🚨 Failure notification
      run: |
        echo "❌ Cloudflare URL update failed!"
        echo "🔧 Manual intervention may be required"
        echo "📅 Failed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
        # Aquí se puede agregar notificación a Slack, Discord, etc.
        # Por ejemplo (requiere configurar SLACK_WEBHOOK_URL en secrets):
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"🚨 Cloudflare URL update failed in agent_LangGreph"}' \
        #   "$SLACK_WEBHOOK_URL"