#!/usr/bin/env python3
"""
üéØ VERIFICACI√ìN FINAL DEL SISTEMA COMPLETO
Prueba todas las mejoras implementadas para Streamlit Cloud
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.agents.direct_api_agent import DirectAPIAgent
from modules.agents.cloud_iot_agent import CloudIoTAgent
import json
from datetime import datetime, timezone

def test_banner_integration():
    """Verificar que el banner se puede importar correctamente"""
    print("üé® VERIFICANDO INTEGRACI√ìN DEL BANNER...")
    
    try:
        # Simular la carga del banner como lo har√≠a Streamlit
        from modules.utils.professional_banner import display_complete_banner
        print("‚úÖ Banner profesional: Importaci√≥n exitosa")
        return True
    except Exception as e:
        print(f"‚ùå Error importando banner: {e}")
        return False

def test_pagination_system():
    """Verificar sistema de paginaci√≥n mejorado"""
    print("\nüìö VERIFICANDO SISTEMA DE PAGINACI√ìN...")
    
    try:
        base_url = "https://wonder-sufficiently-generator-click.trycloudflare.com"
        agent = DirectAPIAgent(base_url=base_url)
        
        # Test consulta corta (deber√≠a usar m√©todo est√°ndar)
        print("üîç Test: Consulta corta (3h)")
        result_short = agent.get_all_recent_data(hours=3.0)
        
        if result_short.get('status') == 'success':
            method_used = result_short.get('method', 'unknown')
            records = result_short.get('total_records', 0)
            print(f"‚úÖ Consulta corta: {records} registros, m√©todo: {method_used}")
            
            if method_used == 'general_endpoint':
                print("‚úÖ M√©todo correcto para consulta corta")
            else:
                print(f"‚ö†Ô∏è M√©todo inesperado: {method_used}")
        else:
            print(f"‚ùå Consulta corta fall√≥: {result_short.get('message', 'Error')}")
            return False
        
        # Test consulta larga (deber√≠a usar paginaci√≥n)
        print("üîç Test: Consulta extensa (24h)")
        result_long = agent.get_all_recent_data(hours=24.0)
        
        if result_long.get('status') == 'success':
            method_used = result_long.get('method', 'unknown')
            records = result_long.get('total_records', 0)
            hours_span = result_long.get('hours_span', 0)
            print(f"‚úÖ Consulta extensa: {records} registros, m√©todo: {method_used}, rango: {hours_span}h")
            
            if method_used == 'paginated':
                print("‚úÖ M√©todo correcto para consulta extensa")
            else:
                print(f"‚ö†Ô∏è M√©todo inesperado: {method_used}")
        else:
            print(f"‚ùå Consulta extensa fall√≥: {result_long.get('message', 'Error')}")
            return False
        
        print("‚úÖ Sistema de paginaci√≥n funcionando correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en sistema de paginaci√≥n: {e}")
        return False

def test_cloud_agent_integration():
    """Verificar integraci√≥n con CloudIoTAgent"""
    print("\nü§ñ VERIFICANDO INTEGRACI√ìN CLOUD AGENT...")
    
    try:
        # Verificar que CloudIoTAgent puede usar las nuevas funcionalidades
        os.environ['GROQ_API_KEY'] = 'test-key'  # Para evitar errores de inicializaci√≥n
        
        # Solo verificar que se puede importar correctamente
        from modules.agents.cloud_iot_agent import CloudIoTAgent
        print("‚úÖ CloudIoTAgent: Importaci√≥n exitosa")
        
        # Verificar que tiene el m√©todo mejorado
        if hasattr(CloudIoTAgent, 'process_query_sync'):
            print("‚úÖ CloudIoTAgent: M√©todo process_query_sync disponible")
        else:
            print("‚ö†Ô∏è CloudIoTAgent: process_query_sync no encontrado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en CloudIoTAgent: {e}")
        return False

def test_streamlit_app_structure():
    """Verificar estructura de la aplicaci√≥n Streamlit"""
    print("\nüåü VERIFICANDO ESTRUCTURA DE STREAMLIT APP...")
    
    try:
        # Verificar que los archivos principales existen
        main_app = "streamlit_app/app_groq_cloud.py"
        if os.path.exists(main_app):
            print("‚úÖ Aplicaci√≥n principal encontrada")
            
            # Verificar que tiene las funciones principales
            with open(main_app, 'r', encoding='utf-8') as f:
                content = f.read()
                
            required_functions = [
                'display_professional_banner',
                'display_chat_interface',
                'main'
            ]
            
            for func in required_functions:
                if func in content:
                    print(f"‚úÖ Funci√≥n {func} encontrada")
                else:
                    print(f"‚ùå Funci√≥n {func} no encontrada")
                    return False
            
            # Verificar que incluye mejoras
            improvements = [
                'analysis_hours',
                'time_range_selector',
                'Configuraci√≥n de An√°lisis Temporal',
                'professional-banner'
            ]
            
            for improvement in improvements:
                if improvement in content:
                    print(f"‚úÖ Mejora {improvement} implementada")
                else:
                    print(f"‚ö†Ô∏è Mejora {improvement} no encontrada")
            
        else:
            print(f"‚ùå Aplicaci√≥n principal no encontrada: {main_app}")
            return False
        
        print("‚úÖ Estructura de aplicaci√≥n Streamlit verificada")
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando aplicaci√≥n: {e}")
        return False

def generate_deployment_report():
    """Generar reporte final para deployment"""
    print("\nüìã GENERANDO REPORTE DE DEPLOYMENT...")
    
    report = {
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "sistema": "Sistema IoT con IA - Versi√≥n Mejorada",
        "mejoras_implementadas": [
            "Banner profesional integrado",
            "Sistema de paginaci√≥n para consultas extensas", 
            "Configuraci√≥n temporal din√°mica (1h-7d√≠as)",
            "M√©todos adaptativos (est√°ndar vs paginado)",
            "Interfaz optimizada para demostraci√≥n a clientes",
            "Informaci√≥n t√©cnica en lenguaje comercial"
        ],
        "capacidades_t√©cnicas": {
            "consultas_r√°pidas": "1-6 horas (hasta 200 registros)",
            "consultas_extensas": "6+ horas (hasta 2,000 registros)",
            "m√©todos": ["est√°ndar", "paginado_inteligente"],
            "hardware": "NVIDIA Jetson Nano 4GB",
            "ia": "Groq API (Gratuita)",
            "frontend": "Streamlit Cloud"
        },
        "configuraciones_disponibles": [
            "3 horas (Tiempo Real)",
            "6 horas (Reciente)", 
            "12 horas (Paginado)",
            "24 horas (1 d√≠a)",
            "48 horas (2 d√≠as)",
            "168 horas (1 semana)"
        ],
        "optimizaciones": [
            "Banner profesional que explica capacidades sin tecnicismos",
            "Selecci√≥n autom√°tica de m√©todo seg√∫n duraci√≥n",
            "Informaci√≥n contextual sobre hardware y limitaciones",
            "Interfaz adaptativa que muestra m√©todo usado",
            "M√©tricas en tiempo real de configuraci√≥n actual"
        ]
    }
    
    with open('deployment_readiness_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ Reporte guardado en: deployment_readiness_report.json")
    return report

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üöÄ VERIFICACI√ìN FINAL DEL SISTEMA COMPLETO")
    print("=" * 60)
    
    tests = [
        ("Banner Profesional", test_banner_integration),
        ("Sistema de Paginaci√≥n", test_pagination_system),
        ("Integraci√≥n Cloud Agent", test_cloud_agent_integration),
        ("Estructura Streamlit", test_streamlit_app_structure)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"üí• Excepci√≥n en {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumen
    print(f"\nüéØ RESUMEN DE VERIFICACI√ìN")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{test_name}: {status}")
    
    print(f"\nüìä RESULTADO FINAL: {passed}/{total} tests exitosos")
    
    if passed == total:
        print("üéâ SISTEMA COMPLETAMENTE LISTO PARA DEPLOYMENT")
        deployment_report = generate_deployment_report()
        
        print(f"\nüöÄ INSTRUCCIONES FINALES:")
        print("1. ‚úÖ Todas las mejoras implementadas y verificadas")
        print("2. ‚úÖ Banner profesional integrado")
        print("3. ‚úÖ Paginaci√≥n autom√°tica funcionando")
        print("4. ‚úÖ Configuraci√≥n temporal din√°mica")
        print("5. üåü Listo para demostraci√≥n a clientes")
        
        return True
    else:
        print("‚ö†Ô∏è ALGUNOS TESTS FALLARON - REVISAR ANTES DE DEPLOYMENT")
        return False

if __name__ == "__main__":
    success = main()
    print(f"\nüèÅ VERIFICACI√ìN: {'‚úÖ EXITOSA' if success else '‚ùå CON ERRORES'}")